//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LIMSReporterWeb.SampleManagerWebServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.thermo.com/informatics/xmlns/limswebservice", ConfigurationName="SampleManagerWebServices.ILIMSWebService")]
    public interface ILIMSWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/Process", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/ProcessRes" +
            "ponse")]
        string Process(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/Process", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/ProcessRes" +
            "ponse")]
        System.Threading.Tasks.Task<string> ProcessAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/CheckAuth", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/CheckAuthR" +
            "esponse")]
        string CheckAuth();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/CheckAuth", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/CheckAuthR" +
            "esponse")]
        System.Threading.Tasks.Task<string> CheckAuthAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/GetAllLogFiles", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/GetAllLogF" +
            "ilesResponse")]
        object GetAllLogFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/GetAllLogFiles", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/GetAllLogF" +
            "ilesResponse")]
        System.Threading.Tasks.Task<object> GetAllLogFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/EraseAllLogFiles", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/EraseAllLo" +
            "gFilesResponse")]
        string EraseAllLogFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/EraseAllLogFiles", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/EraseAllLo" +
            "gFilesResponse")]
        System.Threading.Tasks.Task<string> EraseAllLogFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/GetSingleLogFile", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/GetSingleL" +
            "ogFileResponse")]
        object GetSingleLogFile(string transaction, string direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/GetSingleLogFile", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/GetSingleL" +
            "ogFileResponse")]
        System.Threading.Tasks.Task<object> GetSingleLogFileAsync(string transaction, string direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/LogSOAPMessages", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/LogSOAPMes" +
            "sagesResponse")]
        bool LogSOAPMessages(bool logging);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/LogSOAPMessages", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/LogSOAPMes" +
            "sagesResponse")]
        System.Threading.Tasks.Task<bool> LogSOAPMessagesAsync(bool logging);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/ViewLogStatus", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/ViewLogSta" +
            "tusResponse")]
        bool ViewLogStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thermo.com/informatics/xmlns/limswebservice/ViewLogStatus", ReplyAction="http://www.thermo.com/informatics/xmlns/limswebservice/ILIMSWebService/ViewLogSta" +
            "tusResponse")]
        System.Threading.Tasks.Task<bool> ViewLogStatusAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILIMSWebServiceChannel : LIMSReporterWeb.SampleManagerWebServices.ILIMSWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LIMSWebServiceClient : System.ServiceModel.ClientBase<LIMSReporterWeb.SampleManagerWebServices.ILIMSWebService>, LIMSReporterWeb.SampleManagerWebServices.ILIMSWebService {
        
        public LIMSWebServiceClient() {
        }
        
        public LIMSWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LIMSWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LIMSWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LIMSWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Process(string request) {
            return base.Channel.Process(request);
        }
        
        public System.Threading.Tasks.Task<string> ProcessAsync(string request) {
            return base.Channel.ProcessAsync(request);
        }
        
        public string CheckAuth() {
            return base.Channel.CheckAuth();
        }
        
        public System.Threading.Tasks.Task<string> CheckAuthAsync() {
            return base.Channel.CheckAuthAsync();
        }
        
        public object GetAllLogFiles() {
            return base.Channel.GetAllLogFiles();
        }
        
        public System.Threading.Tasks.Task<object> GetAllLogFilesAsync() {
            return base.Channel.GetAllLogFilesAsync();
        }
        
        public string EraseAllLogFiles() {
            return base.Channel.EraseAllLogFiles();
        }
        
        public System.Threading.Tasks.Task<string> EraseAllLogFilesAsync() {
            return base.Channel.EraseAllLogFilesAsync();
        }
        
        public object GetSingleLogFile(string transaction, string direction) {
            return base.Channel.GetSingleLogFile(transaction, direction);
        }
        
        public System.Threading.Tasks.Task<object> GetSingleLogFileAsync(string transaction, string direction) {
            return base.Channel.GetSingleLogFileAsync(transaction, direction);
        }
        
        public bool LogSOAPMessages(bool logging) {
            return base.Channel.LogSOAPMessages(logging);
        }
        
        public System.Threading.Tasks.Task<bool> LogSOAPMessagesAsync(bool logging) {
            return base.Channel.LogSOAPMessagesAsync(logging);
        }
        
        public bool ViewLogStatus() {
            return base.Channel.ViewLogStatus();
        }
        
        public System.Threading.Tasks.Task<bool> ViewLogStatusAsync() {
            return base.Channel.ViewLogStatusAsync();
        }
    }
}
